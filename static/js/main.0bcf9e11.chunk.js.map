{"version":3,"sources":["Fire.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Fire","props","handleChange","bind","state","form","DEFAULT_FORM","cashFlowGraph","buildGraph","calculateCashflow","networthGraph","calculateNetworth","event","newForm","this","target","name","parseInt","value","setState","year","Date","getFullYear","result","i","push","builder","title","text","grid","containerLabel","xAxis","type","data","buildxaxis","yAxis","axisLabel","formatter","tooltip","trigger","series","smooth","emphasis","focus","investmentGain","investmentFunds","funds","yearlySpending","spending","mortgage","yearlyContribution","salary","YEARS","INVEST_YOY","TAX","cashFlow","Math","round","houseFunds","hvalue","totalMortgage","HOUSE_YOY","label","defaultValue","Col","Form","Group","Label","Control","Container","option","onChange","Row","addForm","Text","className","React","Component","HOUSE_DOWN_PAY","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bcf9e11.chunk.js","sourcesContent":["import React from 'react';\nimport ReactECharts from 'echarts-for-react';\nimport { Form, Container, Row, Col } from 'react-bootstrap';\nimport './App.css';\n\nclass Fire extends React.Component {\n  private static YEARS = 30;\n  private static INVEST_YOY = 0.06;\n  private static HOUSE_YOY = 0.035;\n  private static TAX = 0.3;\n  private static HOUSE_DOWN_PAY = 0.2;\n\n  private static DEFAULT_FORM = {\n    spending: 1000,\n    mortgage: 1000,\n    salary: 5000,\n    hvalue: 470000,\n    funds: 300000\n  }\n\n  constructor(props: any) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      form: Fire.DEFAULT_FORM,\n      cashFlowGraph: this.buildGraph(\n        Fire.DEFAULT_FORM,\n        (form) => this.calculateCashflow(form),\n        'Cash Flow Needed'\n      ),\n      networthGraph: this.buildGraph(\n        Fire.DEFAULT_FORM,\n        (form) => this.calculateNetworth(form),\n        'Net Worth'\n      ),\n    };\n  }\n\n  handleChange(event: any) {\n    const newForm = {\n      ...(this.state as any).form,\n      [event.target.name]: parseInt(event.target.value),\n    };\n    this.setState({\n      form: newForm,\n      cashFlowGraph: this.buildGraph(\n        newForm,\n        (form) => this.calculateCashflow(form),\n        'Cash Flow Needed'\n      ),\n      networthGraph: this.buildGraph(\n        newForm,\n        (form) => this.calculateNetworth(form),\n        'Net Worth'\n      )\n    });\n  }\n\n  buildxaxis() {\n    let year = (new Date()).getFullYear();\n    const result = [];\n    for (let i = 0; i <= 30; ++i) {\n      result.push(year + i);\n    }\n    return result;\n  }\n\n  buildGraph(form: any, builder: (form: any) => any, title: string) {\n    const graph = {\n      title: {\n        text: title,\n      },\n      grid: {\n        containerLabel: true,\n      },\n      xAxis: {\n        type: 'category',\n        data: this.buildxaxis()\n      },\n      yAxis: [\n        {\n          type: 'value',\n          axisLabel: {\n            formatter: '{value}k'\n          },\n        }\n      ],\n      tooltip: {\n        trigger: 'axis',\n      },\n      series: [\n        {\n          data: builder(form),\n          type: 'line',\n          smooth: true,\n          emphasis: {\n            focus: 'series'\n          },\n        },\n      ],\n    }\n\n    return graph;\n  }\n\n  calculateCashflow(form: any): number[] {\n    let investmentGain = 0;\n    let investmentFunds = form.funds;\n    const yearlySpending = (form.spending + form.mortgage) * 12;\n    const yearlyContribution = form.salary * 12 - yearlySpending;\n    const result = [];\n    for (let i = 0; i <= Fire.YEARS; i++) {\n      investmentGain = investmentFunds * (Fire.INVEST_YOY * (1 - Fire.TAX));\n      investmentFunds += investmentGain + yearlyContribution;\n      const cashFlow = investmentGain - yearlySpending;\n      if (cashFlow <= 0) {\n        result.push(Math.round(-cashFlow/1000));\n      }\n    }\n\n    return result;\n  }\n\n  calculateNetworth(form: any): number[] {\n    let investmentGain = 0;\n    let investmentFunds = form.funds;\n    let houseFunds = form.hvalue;\n    let totalMortgage = form.mortgage * 12 * Fire.YEARS;\n    const yearlySpending = (form.spending + form.mortgage) * 12;\n    const yearlyContribution = form.salary * 12 - yearlySpending;\n    const result = [];\n    for (let i = 0; i <= Fire.YEARS; i++) {\n      investmentGain = investmentFunds * (Fire.INVEST_YOY * (1 - Fire.TAX));\n      houseFunds += houseFunds * Fire.HOUSE_YOY;\n      investmentFunds += investmentGain + yearlyContribution;\n      totalMortgage -= form.mortgage * 12;\n      result.push(Math.round((investmentFunds + houseFunds - totalMortgage)/1000));\n    }\n\n    return result;\n  }\n\n  addForm(label: string, defaultValue: any, name: string) {\n    return (\n      <Col>\n        <Form.Group>\n          <Form.Label>{label}</Form.Label>\n          <Form.Control type=\"number\" defaultValue={defaultValue} name={name}/>\n        </Form.Group>\n      </Col>\n    );\n  }\n\n  render() {\n    return (\n      <Container>\n        <ReactECharts option={(this.state as any).cashFlowGraph} />\n        <ReactECharts option={(this.state as any).networthGraph} />\n        <Form onChange={this.handleChange}>\n          <Row>\n          {this.addForm('Spending (per month)', Fire.DEFAULT_FORM.spending, 'spending')}\n          {this.addForm('Mortgage (per month)', Fire.DEFAULT_FORM.mortgage, 'mortgage')}\n          </Row>\n          <Row>\n          {this.addForm('Salary (per month)', Fire.DEFAULT_FORM.salary, 'salary')}\n          {this.addForm('House Value (total market value)', Fire.DEFAULT_FORM.hvalue, 'hvalue')}\n          </Row>\n          <Row>\n          {this.addForm('Investment Starting fund', Fire.DEFAULT_FORM.funds, 'funds')}\n          </Row>\n          <Form.Text className=\"text-muted\">\n            * Investment return YOY: 6% * House return YOY: 3.5% * Inflation not counted\n          </Form.Text>\n        </Form>\n      </Container>\n    );\n  }\n}\n\nexport default Fire;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Fire from './Fire';\n\nfunction App() {\n  return (\n    <Fire />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}